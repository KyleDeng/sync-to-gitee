name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout GitHub code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史记录

      - name: Configure Git
        run: |
          git config --global user.name "GithubAction"  # 保留，不需要修改
          git config --global user.email "action@github.com"  # 保留，不需要修改

      - name: Add Gitee Remote
        run: |
          git remote add gitee https://${{ secrets.GITEE_USER }}:${{ secrets.GITEE_TOKEN }}@gitee.com/${{ secrets.GITEE_REPO }}.git

      - name: Push to Gitee
        run: git push gitee --tags --force

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Make build script executable
        run: chmod +x ./build_package.sh

      - name: Build package
        run: ./build_package.sh

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: readme.tar.gz

  release:
    runs-on: ubuntu-latest
    needs: [build-linux]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/linux-artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sync-release-to-gitee:
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-artifacts
          path: artifacts

      - name: Get tag name
        id: get_tag
        run: echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Gitee Release
        run: |
          # 获取标签名
          TAG_NAME="${{ steps.get_tag.outputs.tag_name }}"
          
          # 获取 GitHub Release 信息
          RELEASE_INFO=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME")
          
          RELEASE_NAME=$(echo "$RELEASE_INFO" | jq -r '.name // .tag_name')
          RELEASE_BODY=$(echo "$RELEASE_INFO" | jq -r '.body // ""')
          
          # 检查 Gitee Release 是否已存在
          EXISTING_RELEASE=$(curl -s -H "Authorization: token ${{ secrets.GITEE_TOKEN }}" \
            "https://gitee.com/api/v5/repos/${{ secrets.GITEE_REPO }}/releases/tags/$TAG_NAME" || echo "")
          
          if [ "$(echo "$EXISTING_RELEASE" | jq -r '.id // empty')" != "" ]; then
            echo "Release already exists, updating..."
            RELEASE_ID=$(echo "$EXISTING_RELEASE" | jq -r '.id')
            
            # 更新现有 Release
            curl -X PATCH \
              -H "Authorization: token ${{ secrets.GITEE_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "{\"name\":\"$RELEASE_NAME\",\"body\":\"$RELEASE_BODY\"}" \
              "https://gitee.com/api/v5/repos/${{ secrets.GITEE_REPO }}/releases/$RELEASE_ID"
          else
            echo "Creating new release..."
            # 创建新 Release
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITEE_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "{\"tag_name\":\"$TAG_NAME\",\"name\":\"$RELEASE_NAME\",\"body\":\"$RELEASE_BODY\"}" \
              "https://gitee.com/api/v5/repos/${{ secrets.GITEE_REPO }}/releases"
          fi

      - name: Upload assets to Gitee Release
        run: |
          TAG_NAME="${{ steps.get_tag.outputs.tag_name }}"
          
          # 获取 Gitee Release ID
          RELEASE_INFO=$(curl -s -H "Authorization: token ${{ secrets.GITEE_TOKEN }}" \
            "https://gitee.com/api/v5/repos/${{ secrets.GITEE_REPO }}/releases/tags/$TAG_NAME")
          
          RELEASE_ID=$(echo "$RELEASE_INFO" | jq -r '.id')
          
          # 上传构建产物
          for file in artifacts/*; do
            if [ -f "$file" ]; then
              echo "Uploading $file to Gitee Release..."
              curl -X POST \
                -H "Authorization: token ${{ secrets.GITEE_TOKEN }}" \
                -F "file=@$file" \
                "https://gitee.com/api/v5/repos/${{ secrets.GITEE_REPO }}/releases/$RELEASE_ID/attach_files"
            fi
          done
